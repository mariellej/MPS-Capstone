pred.arima = predict(arima,n.ahead =10, newxreg=newtime)
lines(newtime,pred.ma$pred,col="blue",type="l")
lines(newtime,pred.ma$pred + qnorm(0.975)*pred.ma$se,col="blue",lty=3)
lines(newtime,pred.ma$pred - qnorm(0.975)*pred.ma$se,col="blue",lty=3)
lines(newtime,pred.ar$pred,col="red",type="l")
lines(newtime,pred.ar$pred + qnorm(0.975)*pred.ar$se,col="red",lty=3)
lines(newtime,pred.ar$pred - qnorm(0.975)*pred.ar$se,col="red",lty=3)
lines(newtime,pred.arima$pred,col="green",type="l")
lines(newtime,pred.arima$pred + qnorm(0.975)*pred.arima$se,col="green",lty=3)
lines(newtime,pred.arima$pred - qnorm(0.975)*pred.arima$se,col="green",lty=3)
View(Anomaly)
load("Anomaly.RData")
anam = Anomaly[, 1]
knitr::opts_chunk$set(echo = TRUE)
library(tseries)
load("Tbill.RData")
plot(Tbill)
acf(Tbill)
Tbill.diff = diff(Tbill)
plot(Tbill.diff)
acf(Tbill.diff)
acf(Tbill.diff^2)
adf.test(Tbill)
kpss.test(Tbill)
adf.test(Tbill.diff)
kpss.test(Tbill.diff)
library(rugarch)
arma.garch.t = ugarchspec(mean.model=list(armaOrder=c(1,0)),variance.model = list(garchOrder=c(1,1)),dist="std")
Tbill.arma.garch.t = ugarchfit(data=Tbill.diff,spec=arma.garch.t)
options(digits=2)
show(Tbill.arma.garch.t)
res=residuals(Tbill.arma.garch.t,standardize=F)
res.std=residuals(Tbill.arma.garch.t,standardize=T)
par(mfrow=c(2,2))
acf(res)
acf(res^2)
acf(res.std)
acf(res.std^2)
theta1 = 0.3
theta2 = 0.6
omega = 0.1
alpha = 0.2
beta = 0.75
N = 500
set.seed(5640)
epsilon = rnorm(N)
## The next three lines set up storage
a = matrix(0,nrow = N,ncol = 1)
sigma = a
Y = a
for (t in 2:N)
{
sigma[t] = sqrt(omega + alpha * a[t-1]^2 + beta * sigma[t-1]^2)
a[t] = sigma[t] * epsilon[t]
}
for (t in 3:N){Y[t] = a[t] + theta1*a[t-1]+ theta2*a[t-2]}
Y = Y[101:N]
fit1 = arima(Y,order=c(0,0,1))
res1=residuals(fit1)
par(mfrow=c(1,2))
acf(res1)
acf(res1^2)
fit2 = arima(Y,order=c(0,0,2))
res2=residuals(fit1)
par(mfrow=c(1,2))
acf(res2)
acf(res2^2)
library(rugarch)
model = ugarchspec(variance.model = list(garchOrder = c(1,1)),mean.model=list(armaOrder=c(0,2)))
fit3=ugarchfit(spec=model,data=Y)
par(mfrow=c(1,2))
plot(fit3,which=10)
plot(fit3,which=11)
library(quantmod)
sDate = as.Date("2014-06-26")
eDate = as.Date("2019-3-15")
getSymbols("GPRO",src="yahoo",from=sDate,to=eDate)
adjGPRO = as.numeric(Ad(GPRO))
gpro = diff(log(adjGPRO))[-1]
garchm=ugarchspec(mean.model = list(armaOrder=c(0,0),archm=T),distribution.model = "std",variance.model = list(garchOrder=c(1,1)))
gpro.garchm=ugarchfit(garchm,data=gpro)
show(gpro.garchm)
res=residuals(Tbill.arma.garch.t,standardize=F)
res.std=residuals(Tbill.arma.garch.t,standardize=T)
par(mfrow=c(2,2))
acf(res)
acf(res^2)
acf(res.std)
acf(res.std^2)
e = residuals(Tbill.arma.garch.t, standardize=TRUE)
qqplot(sort(as.numeric(e)), qt(grid,df=4),
main="t-plot, df=4",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
e = residuals(Tbill.arma.garch.t, standardize=TRUE)
n = length(e)
grid = (1:n)/(n+1)
qqplot(sort(as.numeric(e)), qt(grid,df=4),
main="t-plot, df=4",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
res=residuals(Tbill.arma.garch.t,standardize=F)
res.std=residuals(Tbill.arma.garch.t,standardize=T)
par(mfrow=c(2,2))
acf(res)
acf(res^2)
acf(res.std)
acf(res.std^2)
library(tseries)
load("Tbill.RData")
plot(Tbill)
acf(Tbill)
Tbill.diff = diff(Tbill)
plot(Tbill.diff)
acf(Tbill.diff)
acf(Tbill.diff^2)
adf.test(Tbill)
kpss.test(Tbill)
adf.test(Tbill.diff)
kpss.test(Tbill.diff)
diff.root.Tbill = diff(sqrt(Tbill))
arma.garch.t2 = ugarchspec(mean.model=list(armaOrder=c(1,0)),variance.model = list(garchOrder=c(1,1)),dist="std")
diff.root.Tbill.arma.garch.t = ugarchfit(data=diff.root.Tbill.diff,spec=arma.garch.t2)
diff.root.Tbill = diff(sqrt(Tbill))
arma.garch.t2 = ugarchspec(mean.model=list(armaOrder=c(1,0)),variance.model = list(garchOrder=c(1,1)),dist="std")
diff.root.Tbill.arma.garch.t = ugarchfit(data=diff.root.Tbill,spec=arma.garch.t2)
options(digits=2)
show(diff.root.Tbill.arma.garch.t)
fit1 = arima(Y,order=c(0,0,1))
res1=residuals(fit1)
par(mfrow=c(1,2))
acf(res1)
acf(res1^2)
fit2 = arima(Y,order=c(0,0,2))
res2=residuals(fit1)
par(mfrow=c(1,2))
acf(res2)
acf(res2^2)
fit1 = arima(Y,order=c(0,0,1))
res1=residuals(fit1)
par(mfrow=c(1,2))
acf(res1)
acf(res1^2)
fit2 = arima(Y,order=c(0,0,2))
res2=residuals(fit2)
par(mfrow=c(1,2))
acf(res2)
acf(res2^2)
library(rugarch)
model = ugarchspec(variance.model = list(garchOrder = c(1,1)),mean.model=list(armaOrder=c(0,2)))
fit3=ugarchfit(spec=model,data=Y)
par(mfrow=c(1,2))
plot(fit3,which=10)
plot(fit3,which=11)
knitr::opts_chunk$set(echo = TRUE)
yieldDat = read.table("DailyTreasuryYield.txt",header=T,na.strings="N/A")
yieldDat = na.omit(yieldDat)
pca=princomp(yieldDat[,-1])
names(pca)
summary(pca)
plot(pca)
options(digits=3,width=60)
n=dim(yieldDat)[1]
eig = eigen(cov(yieldDat[,-1])*((n-1)/n))
sqrt(eig$values)
pca$dev
eig$vector[,1]
pca$loadings[,1]
colmeans(yieldDat[,-1])
options(digits=3,width=60)
n=dim(yieldDat)[1]
eig = eigen(cov(yieldDat[,-1])*((n-1)/n))
sqrt(eig$values)
pca$dev
eig$vector[,1]
pca$loadings[,1]
colMeans(yieldDat[,-1])
pca$center
mu=colMeans(yieldDat[,-1])
S=as.matrix(yieldDat[,-1]-rep(1,2765)%*%t(mu))%*%eig$vector
pca$scores[1:5,1]
options(digits=3,width=60)
n=dim(yieldDat)[1]
eig = eigen(cov(yieldDat[,-1])*((n-1)/n))
sqrt(eig$values)
pca$dev
eig$vector[,1]
pca$loadings[,1]
colMeans(yieldDat[,-1])
pca$center
mu=colMeans(yieldDat[,-1])
S=as.matrix(yieldDat[,-1]-rep(1,2765)%*%t(mu))%*%eig$vector
pca$scores[1:5,1]
stocks = read.table("stock.txt",header=T)
stocks = read.table("stock.txt",header=T)
stocks = read.table("stocks.txt",header=T)
sector = stocks$sector
Tech =as.numeric(sector=="TECH")
Health =as.numeric(sector=="HEALTH")
Indust =as.numeric(sector=="INDUST")
load("data.Jan.1.2019.RData")
n=nrow(returns)
R=returns[(n-499):n,c("AAPL","BAX","CAT","CREE","DAL","FB","GE","GLW","GOOG","GSK","INLC","JNJ","MSFT","MSFT","PAYX","PFF","SYY")]
coeffs=matrix(nrow=500,ncol=3)
coeffs=as.ts(coeffs)
colnames(coeffs)=c("Tech","Health","Indust")
for(i in 1:500){
y=100*as.numeric(R[i,])
fitLM = lm(y~0+Tech+Health+Indust)
coeffs[i,]=as.numeric(fitLM$coeff)
}
stocks = read.table("stocks.txt",header=T)
sector = stocks$sector
Tech =as.numeric(sector=="TECH")
Health =as.numeric(sector=="HEALTH")
Indust =as.numeric(sector=="INDUST")
load("data.Jan.1.2019.RData")
n=nrow(returns)
R=returns[(n-499):n,c("AAPL","BAX","CAT","CREE","DAL","FB","GE","GLW","GOOG","GSK","INLC","JNJ","MSFT","PAYX","PFF","SYY")]
coeffs=matrix(nrow=500,ncol=3)
coeffs=as.ts(coeffs)
colnames(coeffs)=c("Tech","Health","Indust")
for(i in 1:500){
y=100*as.numeric(R[i,])
fitLM = lm(y~0+Tech+Health+Indust)
coeffs[i,]=as.numeric(fitLM$coeff)
}
plot(coeffs)
FFdata = read.csv("F-F_Research_Data_Factors_daily.CSV")
nFF = nrow(FFdata)
FF = FFdata[(nFF-522):(nFF-21),]
head(FF)
tail(FF)
### Extract the three factors
FF = FF[,2:4]
dim(FF)
n2=nrow(returns)
R=returns[(n2-501):n2,]
y=100*as.matrix(R[,c("AAPL","CAT","MSFT","VZ")])-FFdata[(nFF-522):(nFF-21),"RF"]
FFm=as.matrix(FF)
fit=lm(y~FFm)
beta = fit$coefficients[2:4,]
beta
meansFactMod = t(beta)%*%colMeans(FFdata[,2:4])
252*meansFactMod
covFactor = diag(diag(cov(fit$residual))) +t(beta)%*%var(FFdata[,2:4])%*%beta
covFactor
View(covFactor)
samplecorr= cor(R)
samplecorr= cor(R)
smaplecorr
samplecorr= cor(R)
samplecorr
FFdata = read.csv("F-F_Research_Data_Factors_daily.CSV")
nFF = nrow(FFdata)
FF = FFdata[(nFF-522):(nFF-21),]
head(FF)
tail(FF)
### Extract the three factors
FF = FF[,2:4]
dim(FF)
n2=nrow(returns)
R=returns[(n2-501):n2,]
y=100*as.matrix(R[,c("AAPL","CAT","MSFT","VZ")])-FFdata[(nFF-522):(nFF-21),"RF"]
FFm=as.matrix(FF)
fit=lm(y~FFm)
beta = fit$coefficients[2:4,]
beta
samplecorr= cor(FFm)
samplecorr
samplecorr= cor(y)
samplecorr
y
head(y)
corrFactor = covFactor/(sd(y[,1])*sd(y[,2])*sd(y[,3])*sd(y[,4]))
samplecorr= cor(y)
samplecorr
corrFactor = covFactor/(sd(y[,1])*sd(y[,2])*sd(y[,3])*sd(y[,4]))
corrFactor
samplecorr= cor(y)
samplecorr
source('~/Documents/Git/MPS-Capstone/Lasso.R')
setwd("~/Documents/Spring 2019/MPS Project/")
data=read.csv(file='export.csv',header=TRUE)
source('~/Documents/Git/MPS-Capstone/Lasso.R')
source('~/Documents/Git/MPS-Capstone/Lasso.R')
source('~/Documents/Git/MPS-Capstone/Lasso.R')
source('~/Documents/Git/MPS-Capstone/Lasso.R')
source('~/Documents/Git/MPS-Capstone/Lasso.R')
seq(1,9)
source('~/Documents/Git/MPS-Capstone/Lasso.R')
source('~/Documents/Git/MPS-Capstone/Lasso.R')
source('~/Documents/Git/MPS-Capstone/Lasso.R')
source('~/Documents/Git/MPS-Capstone/Lasso.R')
source('~/Documents/Git/MPS-Capstone/Lasso.R')
source('~/Documents/Git/MPS-Capstone/Lasso.R')
View(X)
source('~/Documents/Git/MPS-Capstone/Lasso.R')
View(X)
source('~/Documents/Git/MPS-Capstone/Lasso.R')
setwd("~/Documents/Git/MPS-Capstone/")
data=read.csv(file='finaldata.csv',header=TRUE)
date = data$DATE
set.seed(1)
data[is.na(data[,4])]=0
setwd("~/Documents/Git/MPS-Capstone/")
data=read.csv(file='finaldata.csv',header=TRUE)
date = data$DATE
set.seed(1)
data[is.na(data[,19])]=0
data[is.na(data[,19])]
data[is.na(data[,19])]
is.na(data[,19])
data[is.na(data[,19]),19]
setwd("~/Documents/Git/MPS-Capstone/")
data=read.csv(file='finaldata.csv',header=TRUE)
date = data$DATE
set.seed(1)
data[is.na(data[,19]),19]=0
source('~/Documents/Git/MPS-Capstone/Lasso.R')
Ytest
ridge.pred
ridge.pred-Ytest)^2
(ridge.pred-Ytest)^2)
(ridge.pred-Ytest)^2
ridge.pred-Ytest
source('~/Documents/Git/MPS-Capstone/ridge_all_covariates.R')
source('~/Documents/Git/MPS-Capstone/ridge_all_covariates.R')
source('~/Documents/Git/MPS-Capstone/ridge_all_covariates.R')
mean_error
seq(0,10)
source('~/Documents/Git/MPS-Capstone/ridge_all_covariates.R')
mean_error
source('~/Documents/Git/MPS-Capstone/ridge_all_covariates.R')
mean_error
ridge.pred
Ytest
cv.error
ridge.pred-Ytest
(ridge.pred-Ytest)^2
mean((ridge.pred-Ytest)^2)
ridge.pred-Ytest)^2
(ridge.pred-Ytest)^2
ridge.pred-Ytest
max(ridge.pred-Ytest)
min(ridge.pred-Ytest)
source('~/Documents/Git/MPS-Capstone/ridge_all_dates.R')
mean_error
ridge.pred
(ridge.pred-Ytest)^2
ridge.pred-Ytest
(ridge.pred-Ytest)^2
mean((ridge.pred-Ytest)^2)
cv.error
mean_error
View(Xtrain)
View(Xtrain)
source('~/Documents/Git/MPS-Capstone/ridge_all_dates.R')
source('~/Documents/Git/MPS-Capstone/ridge_all_dates.R')
source('~/Documents/Git/MPS-Capstone/ridge_all_dates.R')
cv.error
Ytrain
Ytest
cv.error
knitr::opts_chunk$set(echo = TRUE)
yieldDat = read.table("DailyTreasuryYield.txt",header=T,na.strings="N/A")
yieldDat = na.omit(yieldDat)
pca=princomp(yieldDat[,-1])
names(pca)
summary(pca)
plot(pca)
options(digits=3,width=60)
n=dim(yieldDat)[1]
eig = eigen(cov(yieldDat[,-1])*((n-1)/n))
sqrt(eig$values)
pca$dev
eig$vector[,1]
pca$loadings[,1]
colMeans(yieldDat[,-1])
pca$center
mu=colMeans(yieldDat[,-1])
S=as.matrix(yieldDat[,-1]-rep(1,2765)%*%t(mu))%*%eig$vector
pca$scores[1:5,1]
stocks = read.table("stocks.txt",header=T)
sector = stocks$sector
Tech =as.numeric(sector=="TECH")
Health =as.numeric(sector=="HEALTH")
Indust =as.numeric(sector=="INDUST")
load("data.Jan.1.2019.RData")
n=nrow(returns)
R=returns[(n-499):n,c("AAPL","BAX","CAT","CREE","DAL","FB","GE","GLW","GOOG","GSK","INLC","JNJ","MSFT","PAYX","PFF","SYY")]
coeffs=matrix(nrow=500,ncol=3)
coeffs=as.ts(coeffs)
colnames(coeffs)=c("Tech","Health","Indust")
for(i in 1:500){
y=100*as.numeric(R[i,])
fitLM = lm(y~0+Tech+Health+Indust)
coeffs[i,]=as.numeric(fitLM$coeff)
}
plot(coeffs)
FFdata = read.csv("F-F_Research_Data_Factors_daily.CSV")
nFF = nrow(FFdata)
FF = FFdata[(nFF-522):(nFF-21),]
head(FF)
tail(FF)
### Extract the three factors
FF = FF[,2:4]
dim(FF)
n2=nrow(returns)
R=returns[(n2-501):n2,]
y=100*as.matrix(R[,c("AAPL","CAT","MSFT","VZ")])-FFdata[(nFF-522):(nFF-21),"RF"]
FFm=as.matrix(FF)
fit=lm(y~FFm)
beta = fit$coefficients[2:4,]
beta
meansFactMod = t(beta)%*%colMeans(FFdata[,2:4])
252*meansFactMod
covFactor = diag(diag(cov(fit$residual))) +t(beta)%*%var(FFdata[,2:4])%*%beta
covFactor
corrFactor = covFactor/(sd(y[,1])*sd(y[,2])*sd(y[,3])*sd(y[,4]))
corrFactor
samplecorr= cor(y)
samplecorr
D = diag(c(sd(y[,1]),sd(y[,2]),sd(y[,3]),sd(y[,4])))
corrFactor = D%*%covFactor%*%D
corrFactor
samplecorr= cor(y)
samplecorr
View(D)
D = diag(c(sd(y[,1]),sd(y[,2]),sd(y[,3]),sd(y[,4])))
corrFactor = D%*%covFactor%*%D
corrFactor
samplecorr= cor(y)
samplecorr
FFdata = read.csv("F-F_Research_Data_Factors_daily.CSV")
nFF = nrow(FFdata)
FF = FFdata[(nFF-522):(nFF-21),]
head(FF)
tail(FF)
### Extract the three factors
FF = FF[,2:4]
dim(FF)
n2=nrow(returns)
R=returns[(n2-501):n2,]
y=100*as.matrix(R[,c("AAPL","CAT","MSFT","VZ")])-FFdata[(nFF-522):(nFF-21),"RF"]
FFm=as.matrix(FF)
fit=lm(y~FFm)
beta = fit$coefficients[2:4,]
beta
means = t(beta)%*%colmeans(FFm)
FFdata = read.csv("F-F_Research_Data_Factors_daily.CSV")
nFF = nrow(FFdata)
FF = FFdata[(nFF-522):(nFF-21),]
head(FF)
tail(FF)
### Extract the three factors
FF = FF[,2:4]
dim(FF)
n2=nrow(returns)
R=returns[(n2-501):n2,]
y=100*as.matrix(R[,c("AAPL","CAT","MSFT","VZ")])-FFdata[(nFF-522):(nFF-21),"RF"]
FFm=as.matrix(FF)
fit=lm(y~FFm)
beta = fit$coefficients[2:4,]
beta
means = t(beta)%*%colMeans(FFm)
FFdata = read.csv("F-F_Research_Data_Factors_daily.CSV")
nFF = nrow(FFdata)
FF = FFdata[(nFF-522):(nFF-21),]
head(FF)
tail(FF)
### Extract the three factors
FF = FF[,2:4]
dim(FF)
n2=nrow(returns)
R=returns[(n2-501):n2,]
y=100*as.matrix(R[,c("AAPL","CAT","MSFT","VZ")])-FFdata[(nFF-522):(nFF-21),"RF"]
FFm=as.matrix(FF)
fit=lm(y~FFm)
beta = fit$coefficients[2:4,]
beta
means = t(beta)%*%colMeans(FFm)
means
source('~/Documents/Git/MPS-Capstone/ridge_all_covariates.R')
mean_error
library(tree)
library(randomForest)
source('~/Documents/Git/MPS-Capstone/ridge_all_dates.R')
source('~/Documents/Git/MPS-Capstone/ridge_all_dates.R')
source('~/Documents/Git/MPS-Capstone/ridge_all_dates.R')
mean_error
source('~/Documents/Git/MPS-Capstone/regressionTree.R')
library(gbm)
source('~/Documents/Git/MPS-Capstone/regressionTree.R')
source('~/Documents/Git/MPS-Capstone/BaggingTree.R')
install.packages(gbm)
"gbm"
install.packages("gbm")
source('~/Documents/Git/MPS-Capstone/BaggingTree.R')
source('~/Documents/Git/MPS-Capstone/BaggingTree.R')
source('~/Documents/Git/MPS-Capstone/BaggingTree.R')
source('~/Documents/Git/MPS-Capstone/BaggingTree.R')
source('~/Documents/Git/MPS-Capstone/BaggingTree.R')
source('~/Documents/Git/MPS-Capstone/BaggingTree.R')
source('~/Documents/Git/MPS-Capstone/BaggingTree.R')
source('~/Documents/Git/MPS-Capstone/BaggingTree.R')
mean_error
source('~/Documents/Git/MPS-Capstone/BaggingTree.R')
mean_error
mean(mean_error)
cv.error
yhat
Ytest
yhat-Ytest
